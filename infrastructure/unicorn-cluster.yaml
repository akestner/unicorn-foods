apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: unicorn-cluster
  version: "1.20"
  region: us-west-2
  tags:
    environment: "production"

#secretsEncryption:
#  keyARN: "arn:aws:kms:us-west-2:406946685607:key/cd4ae4d5-2a29-466e-a971-4f9103a9a7b2"

cloudWatch:
  clusterLogging:
    enableTypes: [ "api", "audit", "authenticator", "controllerManager", "scheduler" ]

vpc:
  clusterEndpoints:
    publicAccess: true # TODO switch to private
    #privateAccess: true

iam:
#  serviceRoleARN: arn:aws:iam::406946685607:role/eksClusterRole
#  fargatePodExecutionRoleARN: arn:aws:iam::406946685607:role/AmazonEKSFargatePodExecutionRole
  withOIDC: true
#  serviceAccounts:
#    - metadata:
#        name: yelb
#        namespace: yelb
#      roleName: yelb-role
#      roleOnly: true
#      attachPolicyARNs:
#        #- "arn:aws:iam::aws:policy/AmazonS3FullAccess"
#    - metadata:
#        name: aws-node
#        namespace: kube-system
#      roleName: vpc-cni-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
#    - metadata:
#        name: aws-load-balancer-controller
#        namespace: kube-system
#        # labels: { aws-usage: "load-balancer-controller" }
#      roleName: aws-load-balancer-controller-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/AWSLoadBalancerControllerIAMPolicy"
#    - metadata:
#        name: cluster-autoscaler
#        namespace: kube-system
#        labels:
#          k8s-addon: "cluster-autoscaler.addons.k8s.io"
#          k8s-app: "cluster-autoscaler"
#      roleName: cluster-autoscaler-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/ClusterAutoscaler"
#    - metadata:
#        name: ebs-csi-controller
#        namespace: kube-system
#      roleName: ebs-csi-controller-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/Amazon_EBS_CSI_Driver"
#    - metadata:
#        name: efs-csi-controller
#        namespace: kube-system
#      roleName: efs-csi-controller-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/Amazon_EFS_CSI_Driver"
#    - metadata:
#        name: cloudwatch-agent
#        namespace: amazon-cloudwatch
#      roleName: cloudwatch-agent-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
#    - metadata:
#        name: fluent-bit
#        namespace: amazon-cloudwatch
#      roleName: cloudwatch-logs-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/EKSCloudWatchLogs"
#    - metadata:
#        name: external-dns
#        namespace: kube-system
#      roleName: external-dns-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/ExternalDNSPolicy"
#        - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
#    - metadata:
#        name: appmesh-controller
#        namespace: appmesh-system
#      roleName: appmesh-controller-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
#        - "arn:aws:iam::aws:policy/AWSAppMeshFullAccess"
#    - metadata:
#        name: amp-iamproxy-ingest-service-account
#        namespace: prometheus
#      roleName: prometheus-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::406946685607:policy/AMPIngestPolicy"
#        #- "arn:aws:iam::406946685607:policy/AWSManagedPrometheusWriteAccessPolicy"
#    - metadata:
#        name: amp-iamproxy-query-service-account
#        namespace: grafana
#      roleName: grafana-role
#      roleOnly: true
#      attachPolicyARNs:
#        - "arn:aws:iam::aws:policy/AmazonPrometheusQueryAccess"
#  #      tags:
#  #        Owner: "John Doe"
#  #        Team: "Some Team"

addons:
  - name: vpc-cni
    version: v1.9.0-eksbuild.1 # optional
  - name: coredns
    version: v1.8.3-eksbuild.1 # optional
  - name: kube-proxy
    version: v1.20.4-eksbuild.2 # optional

managedNodeGroups:
  - name: x86-mng
    instanceType: m5.2xlarge
    minSize: 0
    desiredCapacity: 2
    maxSize: 4
    privateNetworking: true
    disableIMDSv1: true
    volumeSize: 50
    volumeType: gp3
    volumeEncrypted: true

  - name: x86-mng-spot
    instanceTypes: [ "m5.2xlarge","m5a.2xlarge","m5d.2xlarge","m5n.2xlarge","m5ad.2xlarge","m5dn.2xlarge","m4.2xlarge" ]
    spot: true
    minSize: 1
    desiredCapacity: 2
    maxSize: 6
    privateNetworking: true
    disableIMDSv1: true
    volumeSize: 50
    volumeType: gp3
    volumeEncrypted: true
    taints:
      - key: spotInstance
        value: "true"
        effect: PreferNoSchedule

#fargateProfiles:
#  - name: fargate-test
#    selectors:
#      # All workloads in the "helloweb" Kubernetes namespace will be scheduled onto Fargate:
#      - namespace: fargate-test
